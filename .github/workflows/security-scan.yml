name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Monday at 1:00 AM
    - cron: '0 1 * * 1'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install bandit safety
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install Node.js dependencies
        run: |
          if [ -f package.json ]; then npm ci; fi
          npm install -g npm-audit-resolver
          
      - name: Run Bandit (Python security scanner)
        run: bandit -r . -f json -o bandit-results.json || true
        
      - name: Run Python dependency security check
        run: safety check -r requirements.txt --json > safety-results.json || true
        
      - name: Run npm audit
        run: |
          if [ -f package.json ]; then
            npm audit --json > npm-audit-results.json || true
          else
            echo '{}' > npm-audit-results.json
          fi
          
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
            npm-audit-results.json
            
      - name: Check for critical vulnerabilities
        run: |
          echo "Checking for critical vulnerabilities in security scan results..."
          python -c "
          import json, sys, os
          has_critical = False
          
          if os.path.exists('npm-audit-results.json') and os.path.getsize('npm-audit-results.json') > 2:
              with open('npm-audit-results.json') as f:
                  npm_data = json.load(f)
                  if 'vulnerabilities' in npm_data:
                      for vuln in npm_data['vulnerabilities'].values():
                          if vuln.get('severity') == 'critical':
                              has_critical = True
                              print(f'Critical npm vulnerability: {vuln.get(\"title\")}')
          
          if os.path.exists('safety-results.json') and os.path.getsize('safety-results.json') > 2:
              with open('safety-results.json') as f:
                  safety_data = json.load(f)
                  for vuln in safety_data:
                      if vuln.get('severity') == 'critical':
                          has_critical = True
                          print(f'Critical Python dependency vulnerability: {vuln.get(\"name\")}')
          
          if has_critical:
              sys.exit(1)
          else:
              print('No critical vulnerabilities found.')
          "
