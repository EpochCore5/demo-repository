name: EpochCoreMASTER Flash Sync Automation

on:
  schedule:
    # Run on a complex schedule pattern - Compound Scheduling
    - cron: '0 */4 * * 1-5'  # Every 4 hours on weekdays
    - cron: '30 12 * * 0,6'  # 12:30 on weekends
  
  workflow_dispatch:
    inputs:
      sync_mode:
        description: 'Sync Mode (full, incremental, delta)'
        required: true
        default: 'incremental'
        type: choice
        options:
          - full
          - incremental
          - delta
      target_repos:
        description: 'Target repositories (comma-separated)'
        required: false
        type: string
      force_sync:
        description: 'Force synchronization'
        required: false
        default: false
        type: boolean

  push:
    branches:
      - main
      - master
      - feature/flash-sync*
    paths:
      - 'agents/**'
      - 'core/**'
      - 'scripts/**'
      - 'assets/**'
      - '.github/workflows/flash_sync.yml'

env:
  PYTHONPATH: ${{ github.workspace }}
  SYNC_LOG_LEVEL: ${{ github.event_name == 'workflow_dispatch' && 'DEBUG' || 'INFO' }}
  SYNC_MODE: ${{ github.event.inputs.sync_mode || 'incremental' }}
  FORCE_SYNC: ${{ github.event.inputs.force_sync || 'false' }}

jobs:
  # Bootstrap Environment - Setup and environment preparation
  bootstrap:
    name: Bootstrap Environment
    runs-on: ubuntu-latest
    outputs:
      matrix_targets: ${{ steps.generate-matrix.outputs.matrix }}
      sync_timestamp: ${{ steps.generate-timestamp.outputs.timestamp }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyyaml requests GitPython pygithub
      
      - name: Generate Sync Timestamp
        id: generate-timestamp
        run: echo "timestamp=$(date -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Generate Target Matrix
        id: generate-matrix
        run: |
          if [ "${{ github.event.inputs.target_repos }}" != "" ]; then
            # Use user-specified repos from workflow dispatch
            REPOS="${{ github.event.inputs.target_repos }}"
            IFS=',' read -ra REPO_ARRAY <<< "$REPOS"
            JSON_ARRAY="["
            for repo in "${REPO_ARRAY[@]}"; do
              if [ "$JSON_ARRAY" != "[" ]; then
                JSON_ARRAY="$JSON_ARRAY,"
              fi
              JSON_ARRAY="$JSON_ARRAY\"$(echo $repo | xargs)\""
            done
            JSON_ARRAY="$JSON_ARRAY]"
            echo "matrix={\"repository\":$JSON_ARRAY}" >> $GITHUB_OUTPUT
          else
            # Use default targets from configuration
            python -c "
import yaml, json, os
with open('sync_targets.yml', 'r') as f:
    targets = yaml.safe_load(f)
print(f'matrix={json.dumps(targets)}')
            " >> $GITHUB_OUTPUT
          fi

  # Secrets Validation - Validate all required secrets are available
  validate-secrets:
    name: Secrets Validation
    runs-on: ubuntu-latest
    needs: bootstrap
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Validate GitHub Token
        run: |
          python scripts/validate_github_token.py \
            --token "${{ secrets.GITHUB_TOKEN }}" \
            --permissions "contents:write,pull_requests:write"
      
      - name: Validate Required Secrets
        run: |
          python scripts/validate_secrets_sync.py \
            --github-token "${{ secrets.GITHUB_TOKEN }}" \
            --api-token "${{ secrets.API_TOKEN }}" \
            --external-token "${{ secrets.EXTERNAL_API_TOKEN }}" \
            --encryption-key "${{ secrets.ENCRYPTION_KEY }}"

  # Module/Agent Sync - Sync all agents and modules
  sync-modules:
    name: Module/Agent Sync
    runs-on: ubuntu-latest
    needs: [bootstrap, validate-secrets]
    strategy:
      matrix: ${{ fromJson(needs.bootstrap.outputs.matrix_targets) }}
      fail-fast: false
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Sync Core Modules
        run: |
          python scripts/sync_core_modules.py \
            --repository ${{ matrix.repository }} \
            --timestamp ${{ needs.bootstrap.outputs.sync_timestamp }} \
            --mode ${{ env.SYNC_MODE }} \
            --force ${{ env.FORCE_SYNC }}
      
      - name: Sync Agents
        run: |
          python scripts/sync_agents.py \
            --repository ${{ matrix.repository }} \
            --timestamp ${{ needs.bootstrap.outputs.sync_timestamp }} \
            --mode ${{ env.SYNC_MODE }}

  # Testing & Linting - Run tests and linters
  test-and-lint:
    name: Testing & Linting
    runs-on: ubuntu-latest
    needs: bootstrap
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint pytest pytest-cov black
      
      - name: Run Linting
        run: |
          black --check .
          pylint --disable=C0111,C0103,C0303 core/ agents/ scripts/
      
      - name: Run Tests
        run: |
          pytest --cov=core --cov=agents --cov-report=xml
      
      - name: Test Flash Sync Components
        run: |
          python scripts/test_flash_sync_components.py --verbose
      
      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # Governance Audit - Run governance audit
  governance-audit:
    name: Governance Audit
    runs-on: ubuntu-latest
    needs: [bootstrap, test-and-lint]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Governance Audit
        run: |
          python scripts/governance_sync.py --ci-mode --generate-report
      
      - name: Upload Audit Report
        uses: actions/upload-artifact@v3
        with:
          name: governance-audit-report
          path: reports/governance_audit.json

  # Asset & Artifact Sync - Sync assets and artifacts
  sync-assets:
    name: Asset & Artifact Sync
    runs-on: ubuntu-latest
    needs: [bootstrap, governance-audit]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pillow svglib cairosvg
      
      - name: Generate Icons
        run: |
          mkdir -p assets/glyphs
          python scripts/generate_icons.py --output-dir assets/glyphs
      
      - name: Convert SVG to PNG
        run: |
          python scripts/convert_svg_to_png.py \
            --input-dir assets/glyphs \
            --output-dir assets/glyphs \
            --sizes 16,24,32,48,64,128
      
      - name: Upload Generated Assets
        uses: actions/upload-artifact@v3
        with:
          name: generated-assets
          path: assets/glyphs/

  # Commit & PR Automation - Automate commits and PRs
  commit-changes:
    name: Commit & PR Automation
    runs-on: ubuntu-latest
    needs: [sync-modules, sync-assets]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Download Generated Assets
        uses: actions/download-artifact@v3
        with:
          name: generated-assets
          path: assets/glyphs/
      
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
      
      - name: Commit Changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "Flash Sync: Auto-update assets and modules [${{ needs.bootstrap.outputs.sync_timestamp }}]"
            git push
          else
            echo "No changes to commit"
          fi
      
      - name: Create Pull Request
        if: github.event_name == 'workflow_dispatch' && env.SYNC_MODE == 'full'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Flash Sync: Full synchronization [${{ needs.bootstrap.outputs.sync_timestamp }}]"
          title: "Flash Sync: Full synchronization [${{ needs.bootstrap.outputs.sync_timestamp }}]"
          body: |
            ## EpochCoreMASTER Flash Sync
            
            This is an automated PR created by the Flash Sync automation system.
            
            ### Changes:
            
            - Full synchronization of all modules and agents
            - Generated updated assets and artifacts
            - Applied governance compliance updates
            
            Timestamp: ${{ needs.bootstrap.outputs.sync_timestamp }}
          branch: flash-sync/${{ needs.bootstrap.outputs.sync_timestamp }}
          base: main

  # Cross-Repository Flash Sync - Sync to target repositories
  cross-repo-sync:
    name: Cross-Repository Flash Sync
    runs-on: ubuntu-latest
    needs: [bootstrap, sync-modules, sync-assets, governance-audit]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.target_repos != ''
    strategy:
      matrix: ${{ fromJson(needs.bootstrap.outputs.matrix_targets) }}
      fail-fast: false
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pygithub
      
      - name: Cross-Repository Sync
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/cross_repo_sync.py \
            --source-repo "${{ github.repository }}" \
            --target-repo "${{ matrix.repository }}" \
            --modules "core,agents,scripts,assets" \
            --timestamp "${{ needs.bootstrap.outputs.sync_timestamp }}" \
            --mode "${{ env.SYNC_MODE }}"

  # Notification & Diffusion - Send notifications
  notify:
    name: Notification & Diffusion
    runs-on: ubuntu-latest
    needs: [bootstrap, commit-changes, cross-repo-sync]
    if: always()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set Job Status
        id: status
        run: |
          if [[ "${{ needs.commit-changes.result }}" == "success" ]] || \
             [[ "${{ needs.cross-repo-sync.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "icon=✅" >> $GITHUB_OUTPUT
            echo "message=Flash Sync completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "icon=❌" >> $GITHUB_OUTPUT
            echo "message=Flash Sync failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack Notification
        if: env.SLACK_WEBHOOK != ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "${{ steps.status.outputs.icon }} ${{ steps.status.outputs.message }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.status.outputs.icon }} EpochCoreMASTER Flash Sync"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Status:* ${{ steps.status.outputs.message }}\n*Repository:* ${{ github.repository }}\n*Sync Timestamp:* ${{ needs.bootstrap.outputs.sync_timestamp }}\n*Triggered by:* ${{ github.actor }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>*"
                  }
                }
              ]
            }
      
      - name: Send Email Notification
        if: env.NOTIFICATION_EMAIL != ''
        run: |
          echo "Subject: EpochCoreMASTER Flash Sync - ${{ steps.status.outputs.message }}" > email.txt
          echo "From: github-actions@github.com" >> email.txt
          echo "To: ${{ secrets.NOTIFICATION_EMAIL }}" >> email.txt
          echo "" >> email.txt
          echo "EpochCoreMASTER Flash Sync - ${{ steps.status.outputs.message }}" >> email.txt
          echo "" >> email.txt
          echo "Repository: ${{ github.repository }}" >> email.txt
          echo "Sync Timestamp: ${{ needs.bootstrap.outputs.sync_timestamp }}" >> email.txt
          echo "Triggered by: ${{ github.actor }}" >> email.txt
          echo "" >> email.txt
          echo "View the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> email.txt
          
          cat email.txt | curl -s --url "smtp://smtp.example.com:587" \
            --ssl-reqd \
            --mail-from "github-actions@github.com" \
            --mail-rcpt "${{ secrets.NOTIFICATION_EMAIL }}" \
            --upload-file -
